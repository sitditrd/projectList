변수 : 하나의 값을 저장하기 위한 기억공간
int num  =3;

배열 : 데이터 타입이 같은 데이터를 하나로 묶는 것
int[] num = new int[3];
num[0] = 10;
num[1] = 20;
num[2] = 30;

홍길동 30 M
갑동이 25 F

String name = "홍길동";
String name = "갑동이";
int age = 30;
int age = 25;

typeof struct person {
char[] name;
int age;
char gen;
}

person p;
p.name="홍길동";
p.age=30;
p.gen='M';

객체에서는 위처럼 하지 않고 클래스 단위로 처리한다.

클래스 : 구조체(멤버변수) + 함수(메소드)
=>객체들의 공통점을 찾아내어 그 공통점을 표현하는 것, 객체의 설계도

객체(object) : 실세계에 존재하는 모든 사물이나 개념 
객체 모델링 : 객체의 특징과 기능을 구분한다. (객체를 프로그램으로 구현하기 위한 분석작업이다.)

홍길동(객체)
객체의 특징 : 이름 : 홍길동 / 나이 : 30 / 성별 : 남
객체의 기능 : 객체가 하는 동작들 -> 먹는다, 달린다.(주로 형용사, 동사가 해당)

이영희(객체)
객체의 특징 : 이름 이영희 / 나이 : 25 / 성병 : 여
객체의 기능 : 객체가 하는 동작들 -> 먹는다, 달린다.(주로 형용사, 동사가 해당)

//객체를 생성하기 위한 틀
//사용자가 정의한 데이터 타입
class Person {
	String name; //멤버변수
	int age;
	char gen;
	
	void run() { //메소드
	Sysout.out.println("run");
	}
	void eat() {
	sysout.out.println(eat);
	}
}

public static void main(String[] args) {
	int name; //4바이트가 잡힌다.
	name = 3; //3이 저장이 된다. 
	
	Person p; //데이터 타입이 클래스이면 Stack영역에 값이 잡히지 않는다. 즉 객체선언은 주소를 저장하기 위하여 Stack에 4바이트 메모리만 생성
	p = new Person(); //Heap 영역에 값을 저장하기 위한 4바이트가 잡힌다. 
	
	p : 객체참조변수 = 객체변수 = 참조변수
	p.name = "홍길동;
	p.age = 30;
	p.gen = "남";
	p.eat();
	p.run();
	
	Person pn = new Person();
	pn.name = "이영희";
	pn.age = 25;
	pn.gen = '여';
	pn.eat();
	pn.run();
	
}

[명명규칙]
공통이름 규칙
1. 영문, 숫자, 특수문자($, _) 조합해서 사용한다.
2. 숫자로 시작할 수 없다.
3. 이름길이에 제한이 없다.

[클래스]
1. 대문자로 시작한다.(관객)
2. 두단어 이상 이름을 지울때는 단어의 첫글자는 대문자로 시작하고 나머지 소문자로 사용한다. (CarData)

[변수, 메소드]
1. 소문자로 시작한다.(관례)
2. 두단어 이상 이름을 지을때는 단어의 첫글자는 대문자로 시작하고 나머지 소문자로 사용한다.(carData])




 